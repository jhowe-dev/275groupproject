package Controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.Timer;

import Model.RedKnot;
import Model.Trash;
import Model.TrashCan;
import view.FlyGameView;

public class FlyGameController {
	public FlyGameView flyGameViewer=new FlyGameView();
	private ArrayList<Trash> trashList=new ArrayList<Trash>();
	private ArrayList<Integer> coordinateList=new ArrayList<Integer>();
	public static double screenwidth=1440;
	public static double screenheight=900;
	public static double widthratio=screenwidth/1440;
	public static double heightratio=screenheight/900;
	private int length=0;
	private boolean addTrash=false;
	private int life=7;
	private int time=61;
	private int counter=0;
	private ArrayList<Boolean> notHeldList=new ArrayList<Boolean>();
	public static int imgw=100;
	public static int imgh=100;
	private volatile int screenX = 0;
	private volatile int screenY = 0;
	private volatile int trashXCoor = 0;
	private volatile int trashYCoor = 0;
	private Random rand=new Random();
	private RedKnot red=new RedKnot(100,(int)(225*heightratio));
	private TrashCan trashCan=new TrashCan((int)(50*widthratio), (int)(650*heightratio));
	private Timer timer=new Timer(1000,addTime());
	public FlyGameController(){
		for(int i=0;i<3;i++){
			addTrash(i);
		}
		System.out.println("Test1");
		flyGameViewer.render(coordinateList);
		System.out.println("Test2");
		flyGameViewer.addMouseListener(addMouseListener());
		flyGameViewer.addMouseMotionListener(addMouseMotion());
	}
	public void onTick(){
		timer.setInitialDelay(0);
        timer.start();
		while(time>0&&life>0){
			try {
				Thread.sleep(65);
				} 
			catch (InterruptedException e) {
				e.printStackTrace();
				}
			red.move();
			flyGameViewer.updateRed(red.gety());
			for(int k=0;k<length;k++){
				if(notHeldList.get(k)){
					trashList.get(k).move();
					coordinateList.add(trashList.get(k).getx());
				}
				else{
					coordinateList.add(trashList.get(k).getx());
				}
				if(red.isTouching(trashList.get(k))&&notHeldList.get(k)){
					life--;
					flyGameViewer.updateLives(life);
					removeTrash(k);
				}
				if(trashList.get(k).getx()+trashList.get(k).getXAdjusted()<=0&&notHeldList.get(k)){
					removeTrash(k);
				}
			}
			flyGameViewer.updateTime(time);
			flyGameViewer.render(coordinateList);
			if(addTrash&&length<6&&(counter>=30)){
				int r=rand.nextInt(3);
				addTrash(r);
			}
			counter++;
		}
		if(life>0){
			System.out.println("You win");
		}
		else{
			System.out.println("You lose");
		}
	}
	public MouseListener addMouseListener(){
		MouseListener l=new MouseListener(){

			@Override
			public void mouseClicked(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				screenX = e.getXOnScreen();
		        screenY = e.getYOnScreen();
				for(int i=0;i<length;i++){
					if(trashList.get(i).isGrabbed(screenX,screenY)){
						notHeldList.set(i,false);
				        trashXCoor=trashList.get(i).getx();
				        trashYCoor=trashList.get(i).gety();
				        i=length+1;
					}
				}
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				for(int i=0;i<length;i++){
					if(!notHeldList.get(i)){
						if(trashCan.isEatingTrash(trashList.get(i))){
							trashList.remove(i);
							coordinateList.remove(i);
							length--;
							flyGameViewer.removeTrash(i);
							notHeldList.remove(i);
						}
						else{
							trashList.get(i).setcoor(trashXCoor, trashYCoor);
							coordinateList.add(trashList.get(i).getx());
						}
					}
					notHeldList.set(i,true);
				}
			}
			
		};
		return l;
	}
	public MouseMotionListener addMouseMotion(){
		MouseMotionListener l=new MouseMotionListener(){

			@Override
			public void mouseDragged(MouseEvent e) {
				for(int k=0;k<length;k++){
					if(!notHeldList.get(k)){
						int deltaX = e.getXOnScreen() - screenX;
				        int deltaY = e.getYOnScreen() - screenY;
				        trashList.get(k).setcoor(trashXCoor + deltaX, trashYCoor + deltaY);
					}
				}
			}

			@Override
			public void mouseMoved(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}

			
		};
		return l;
	}
	public ActionListener addTime(){
		ActionListener timerListener = new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				time--;
				addTrash=true;
			}
			
		};
		return(timerListener);
	}
	public void addTrash(int y){
		
		trashList.add(new Trash((int)(1400*widthratio),(int)(200*y*heightratio)));
		coordinateList.add((int)(1400*widthratio));
		notHeldList.add(true);
		flyGameViewer.addTrash((int)(1400*widthratio),(int)(200*y*heightratio));
		addTrash=false;
		length++;
	}
	public void removeTrash(int index){
		trashList.remove(index);
		coordinateList.remove(index);
		notHeldList.remove(index);
		flyGameViewer.removeTrash(index);
		length--;
	}
	public int getLength(){
		return length;
	}
	public static void main(String[] args){
		FlyGameController p=new FlyGameController();
		p.onTick();
	}
}
